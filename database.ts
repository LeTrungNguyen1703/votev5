import { PrismaClient } from "@prisma/client";
import { SQLDatabase } from "encore.dev/storage/sqldb";

// Define a database named 'encore_prisma_test', using the database migrations
// in the "./prisma/migrations" folder (where prisma will generate their migrations).
// Set `source` to `prisma` to let Encore know that the migrations are generated by Prisma.
export const DB = new SQLDatabase('votev5', {
  migrations: {
    path: './prisma/migrations',
    source: 'prisma',
  },
});

// Allow overriding the connection via the standard DATABASE_URL env var.
// This is helpful when developing without running `encore run` (which
// provisions a temporary DB and exposes it at `DB.connectionString`).
const datasourceUrl = process.env.DATABASE_URL ?? DB.connectionString;

export const prisma = new PrismaClient({
  datasources: {
    db: {
      url: datasourceUrl,
    },
  },
});

// Try to proactively connect the Prisma client so connection errors are
// reported early with an actionable message rather than later during a query.
(async () => {
  try {
    await prisma.$connect();
  } catch (err: any) {
    // Improve the default error message â€” include the effective connection string
    // (masked partially for safety) and next steps for the developer.
    const shownUrl = typeof datasourceUrl === 'string'
      ? datasourceUrl.replace(/(postgresql:\/\/)(.*?@)/, '$1****:****@$2')
      : String(datasourceUrl);

    console.error('\nPrisma failed to connect to the database.');
    console.error(`Effective datasource URL: ${shownUrl}`);
    console.error('\nCommon fixes:');
    console.error('- If you are using Encore for local development, run:');
    console.error('    npx encore run');
    console.error("  Encore will provision a temporary database and set up the connection.");
    console.error('- Or set the DATABASE_URL environment variable to a running Postgres instance:');
    console.error('  (Windows CMD)');
    console.error('    set DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE');
    console.error('  (PowerShell)');
    console.error('    $env:DATABASE_URL = "postgresql://USER:PASSWORD@HOST:PORT/DATABASE"');
    console.error('\nIf you believe the database should be running (e.g. Encore is running), verify the host/port are reachable and try again.');

    // Re-throw so the application startup still fails (so the problem isn't hidden).
    throw err;
  }
})();
